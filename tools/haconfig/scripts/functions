#!/bin/bash

info_level=1
debug_level=2

function isMaster()
{
    # Usage:
    #     isMaster <nodename>
    if [ $# -ne 1 ]
    then
        return 1
    fi

    LOCALHOST=$(uname -n|cut -d "." -f 1)

    if [ "$1" == "$LOCALHOST" ]
    then
        #Master node
        return 0
    else
        return 1
    fi
}

function getSLEVersion()
{
    # Usage:
    #     INFO=($(echo $(getSLEVersion)))
    #     INFO[0] is Version
    #     INFO[1] is PatchLevel
    vals=`cat /etc/SuSE-release|grep -P "PATCHLEVEL|VERSION" | sed "s/ //g"`
    eval ${vals}
    echo ${VERSION} ${PATCHLEVEL}
}

function nconvert()
{
    # Usage:
    #     result=`nconvert 3`
    echo -n $1 | tr "123456789" "bcdefghij"
}

function _logRun()
{
    # Usage:
    #     Should not call it directly!!
    echo -e "== [`hostname`:${USER}@`pwd`]\nCommand: ${*}\nStart  : [`date`] \n`${*} 2>&1`\nStop   : [`date`]\n";
}

function infoRun()
{
    # Usage:
    #     infoRun ls -l
    #   To show log, need log_level great equal ${info_level}
    if [ ${log_level:-0} -ge ${info_level} ]
    then
        _logRun ${*}
    else
        ${*} >/dev/null 2>&1
    fi
}

function debugRun()
{
    # Usage:
    #     infoRun ls -l
    #   To show log, need log_level great equal ${debug_level}
    if [ ${log_level:-0} -ge ${debug_level} ]
    then
        _logRun ${*}
    else
        ${*} >/dev/null 2>&1
    fi
}

function _log()
{
    # Usage:
    #     Should not call it directly!!
    echo -e "${1}:  ${*}"
}

function infoLog()
{
    if [ ${log_level:-0} -ge ${info_level} ]
    then
        _log "INFO" "${*}"
    fi
}

function debugLog()
{
    if [ ${log_level:-0} -ge ${debug_level} ]
    then
        _log "DEBUG" "${*}"
    fi
}

function getEnv()
{
    key=$1
    file="../cluster_conf"
    if [ $# -eq 2 ];then
        file=$2
    fi
    value=`grep $key $file|cut -d'=' -f2`
    echo $value
}

function get_hb_report()
{
    if [ $# -ne 2 ];then
        echo "usage: get_hb_report $CLUSTER_CONF $DIR_TO_PUT_FILE"
    fi
    cluster_conf=$1
    dest=$2
    #get the ip of 1st node, and try to run hb_report on it, then return to the jenkins server
    ip=`cat $cluster_conf | grep IP_NODE |cut -d "=" -f 2 | head -1`
    date_str=`date +%s`
    hb_report="hb_report_${ip}_${date_str}"
    ssh root@${ip} "systemctl restart pacemaker; sleep 3; hb_report -f 0:00 $hb_report"
    echo "ssh root@${ip}" "systemctl start pacemaker; sleep 3; hb_report -f 0:00 $hb_report"
    scp ${ip}:/root/$hb_report* $dest
}

function nextPhase()
{
    # Usage:
    #     nextPhase "Add some comments"
    echo -e "\n***** $(hostname): Mailstone - ${1}"

}

#Replaced by twopence? Needs extra pkgs
function cpToNodes()
{
    if [ $# -ne 3 ]
    then
        echo "Error! Need three parameters, cpToNodes <CLUSTER_CONF_IN_HOST> <FILES> <DIR_IN_GUEST>"
        echo "Error command: cpToNodes $*"
        return
    fi

    CLUSTER_CONF=$1
    FILES=$2
    DIR=$3

    for ip in `cat ${CLUSTER_CONF} |grep IP_NODE |cut -d "=" -f 2`
    do
    {
        ssh root@${ip} "mkdir -p ${DIR}" 2>/dev/null
        scp ${FILES} root@${ip}:${DIR} 2>/dev/null
    } &
    done
    wait
}

function runOnAllNodes()
{
    if [ $# -ne 2 ]
    then
        echo "Error! Need two parameters, runOnAllNodes <CLUSTER_CONF_IN_HOST> <COMMANDS>"
        echo "Error command: runOnAllNodes $*"
        return
    fi

    CLUSTER_CONF=$1
    COMMANDS=$2

    for ip in `cat ${CLUSTER_CONF} |grep IP_NODE |cut -d "=" -f 2`
    do
    {
        ssh root@${ip} "${COMMANDS}"
    } &
    done
    wait
}

function runOnMasterNodes()
{
    if [ $# -ne 3 ]
    then
        echo "Error! Need three parameters, runOnMasterNodes <CLUSTER_CONF_IN_HOST> <NODE> <COMMANDS>"
        echo "Error command: runOnMasterNodes $*"
        return
    fi

    CLUSTER_CONF=$1
    NODENAME=$2
    COMMANDS=$3

    num=`cat ${CLUSTER_CONF} |grep ${NODENAME} |cut -d "=" -f 1|sed "s/HOSTNAME_NODE//g"`
    ip=`cat ${CLUSTER_CONF} |grep IP_NODE${num} |cut -d "=" -f 2`
    ssh root@${ip} "${COMMANDS}"
}

function retrieveLogsFromAll()
{
    if [ $# -ne 3 ]
    then
        echo "Error! Need two parameters, retrieveLogsFromAll <CLUSTER_CONF_IN_HOST> <LOG_DIR_IN_HOST> <LOGS_LIST>"
        echo "Error command: retrieveLogsFromAll $*"
        return
    fi

    CLUSTER_CONF=$1
    LOG_DIR=$2
    LOGS_LIST=$3

    for ip in `cat $CLUSTER_CONF |grep IP_NODE |cut -d "=" -f 2`
    do
    {
        for log in ${LOGS_LIST[@]}
        do
            rsync -az root@${ip}:${log} ${LOG_DIR}
        done
    } &
    done

    wait
}

function retrieveLogsFromNode()
{
    if [ $# -ne 4 ]
    then
        echo "Error! Need two parameters, retrieveLogsFromAll <CLUSTER_CONF_IN_HOST> <NODE> <LOG_DIR_IN_HOST> <LOGS_LIST>"
        echo "Error command: retrieveLogsFromAll $*"
        return
    fi

    CLUSTER_CONF=$1
    NODENAME=$2
    LOG_DIR=$3
    LOGS_LIST=$4

    num=`cat ${CLUSTER_CONF} |grep ${NODENAME} |cut -d "=" -f 1|sed "s/HOSTNAME_NODE//g"`
    ip=`cat ${CLUSTER_CONF} |grep IP_NODE${num} |cut -d "=" -f 2`

    for log in ${LOGS_LIST[@]}
    do
        rsync -az root@${ip}:${log} ${LOG_DIR}
    done
}
